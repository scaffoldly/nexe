name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  warm:
    timeout-minutes: 720 # 12 hours to let arm64 builds run
    strategy:
      matrix:
        node: [20, 22]
        os: [linux]
        platform: [amd64, arm64]
    outputs:
      node-version: ${{ steps.node-version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: docker/setup-qemu-action@v3

      - id: node-version
        run: |
          echo "NODE_OS=$(docker run --platform ${{ matrix.os }}/${{ matrix.platform }} node:${{ matrix.node }} uname -s)" >> "$GITHUB_ENV"
          echo "NODE_ARCH=$(docker run --platform ${{ matrix.os }}/${{ matrix.platform }} node:${{ matrix.node }} uname -m)" >> "$GITHUB_ENV"
          echo "NODE_VERSION=$(docker run --platform ${{ matrix.os }}/${{ matrix.platform }} node:${{ matrix.node }} --version)" >> "$GITHUB_ENV"
          echo "version=$(docker run --platform ${{ matrix.os }}/${{ matrix.platform }} node:${{ matrix.node }} --version)" >> "$GITHUB_OUTPUT"

      - uses: actions/cache@v4
        if: always()
        with:
          path: .nexe
          key: nexe-${{ env.NODE_OS }}-${{ env.NODE_ARCH }}-${{ env.NODE_VERSION }}

      - run: |
          docker run \
            --mount=type=bind,src=.,dst=/root -w /root \
            --platform ${{ matrix.platform }} \
            node:${{ matrix.node }} \
              bash -c \
                "yarn && yarn build --python=/usr/bin/python3 && ./dist/is-warm"

      - uses: actions/upload-artifact@v4
        if: always()
        id: upload
        with:
          name: nexe-${{ env.NODE_OS }}-${{ env.NODE_ARCH }}-${{ env.NODE_VERSION }}
          path: .nexe

  # collect:
  #   needs: warm
  #   runs-on: ubuntu-latest
  #   outputs:
  #     node-matrix: ${{ steps.make.outputs.matrix }}
  #   steps:
  #     - id: make
  #       run: |
  #         echo '${{ toJSON(needs) }}' > needs.json

  #         # grab warm.*.outputs.node-version, drop leading 'v', uniq
  #         versions=$(jq -r '.[].outputs."node-version"' needs.json \
  #                   | sed 's/^v//' \
  #                   | sort -u)

  #         # {"node":[ "20.11.1", "22.2.0" ]}
  #         json=$(printf '%s\n' $versions | jq -R . | jq -s '{node: .}')
  #         echo "matrix=$json" >> "$GITHUB_OUTPUT"

  # build:
  #   needs: collect
  #   strategy:
  #     matrix: ${{ fromJson(needs.collect.outputs.node-matrix) }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v4
  #       with:
  #         pattern: nexe-*
  #         path: ./nexe-files
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: docker/setup-qemu-action@v3
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/metadata-action@v5
  #       id: meta
  #       with:
  #         images: |
  #           ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=semver,pattern={{version}},value=${{ matrix.node }},prefix=node-
  #           type=semver,pattern={{major}},value=${{ matrix.node }},prefix=node-
  #           type=semver,pattern={{major}}.{{minor}},value=${{ matrix.node }},prefix=node-
  #     - uses: docker/build-push-action@v6
  #       with:
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         platforms: linux/amd64,linux/arm64
  #         build-args: |
  #           NODE_VERSION=${{ matrix.node }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         pull: true
  #         push: true
